<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Thavanathan</title>
    <link>http://example.org/</link>
    <description>Recent content on Thavanathan</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 14 Feb 2020 16:14:00 +0530</lastBuildDate>
    
	<atom:link href="http://example.org/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Variables and Simple data structures</title>
      <link>http://example.org/tutorials/python-beginner/variables/</link>
      <pubDate>Fri, 14 Feb 2020 16:14:00 +0530</pubDate>
      
      <guid>http://example.org/tutorials/python-beginner/variables/</guid>
      <description>Introduction As in any other language, Python has variables as we some simple common data types like int, float, string&amp;hellip; In this section we will see how variables are working in Python and how to use these simple data types.
Variables As we said already, in Python, everything is an object. For example strings, numbers, True, False&amp;hellip; etc. Like all objects in real world have names, we name Python objects too.</description>
    </item>
    
    <item>
      <title>Getting started with interpreter</title>
      <link>http://example.org/tutorials/python-beginner/2019-11-20-getting-started/</link>
      <pubDate>Wed, 20 Nov 2019 05:00:00 +0000</pubDate>
      
      <guid>http://example.org/tutorials/python-beginner/2019-11-20-getting-started/</guid>
      <description>3.1 Python Interactive Interpreter In the previous section, we saw how to install Python in various operating system. Now let&amp;rsquo;s learn how to use Python Interactive Interpreter and how to run a python program.
If you are using Windows open command prompt and type python. If you are using Mac, open Terminal and type python. open Console and type python in Linux.
This command opens Python interactive interpreter like the one shown below.</description>
    </item>
    
    <item>
      <title>Installing Python</title>
      <link>http://example.org/tutorials/python-beginner/2019-11-17-installing-python/</link>
      <pubDate>Sun, 17 Nov 2019 05:00:00 +0000</pubDate>
      
      <guid>http://example.org/tutorials/python-beginner/2019-11-17-installing-python/</guid>
      <description>Introduction In this post we will learn about installing Python on Windows, Mac and Linux.
Windows Download python from https://www.python.org/downloads/. You will see multiple versions of Python listed over there. 3.7.1 is the latest stable version at the time of writing this post. Select 3.7.1 link as shown in the below figure.
After selecting a particular version of Python you will see all the platform specific setup files over there like the one below.</description>
    </item>
    
    <item>
      <title>Python Introduction</title>
      <link>http://example.org/tutorials/python-beginner/2019-11-14-introduction/</link>
      <pubDate>Thu, 14 Nov 2019 05:00:00 +0000</pubDate>
      
      <guid>http://example.org/tutorials/python-beginner/2019-11-14-introduction/</guid>
      <description>Introduction Python is a general purpose programming language. First version of Python was released around the year 1991. Python syntax is inspired by C syntax, but it is much easier than that. If you are coming from other languages like C or Java, first thing you will notice that Python doesn&amp;rsquo;t use curly braces or semi colons. Even though Semi-colons are allowed, nobody really uses it.
Python is majorly used in following areas.</description>
    </item>
    
    <item>
      <title>Django Introduction</title>
      <link>http://example.org/categories/title/</link>
      <pubDate>Thu, 07 Nov 2019 05:00:00 +0000</pubDate>
      
      <guid>http://example.org/categories/title/</guid>
      <description>Introduction Python&amp;rsquo;s CGI library is good enough for writing websites from ground up. But we need to put a lot of effort into it to build a usable and secure website. When building a web application we often come across some common tasks like authenticating users, connecting to a database, sending emails to users, a reliable admin interface to manage and add content to our site, etc. If we solve all of these problems ourselves, it is time-consuming.</description>
    </item>
    
    <item>
      <title>Web programming with Python - Django Introduction</title>
      <link>http://example.org/categories/title/</link>
      <pubDate>Thu, 07 Nov 2019 05:00:00 +0000</pubDate>
      
      <guid>http://example.org/categories/title/</guid>
      <description>Introduction Python&amp;rsquo;s CGI library is good enough for writing websites from ground up. But we need to put a lot of effort into it to build a usable and secure website. When building a web application we often come across some common tasks like authenticating users, connecting to a database, sending emails to users, a reliable admin interface to manage and add content to our site, etc. If we solve all of these problems ourselves, it is time-consuming.</description>
    </item>
    
    <item>
      <title>Deploying Django Application with Nginx and uwsgi</title>
      <link>http://example.org/categories/title/</link>
      <pubDate>Sat, 08 Dec 2018 05:00:00 +0000</pubDate>
      
      <guid>http://example.org/categories/title/</guid>
      <description>Introduction In this post we will learn about deploying Django applications. There are many ways to deploy a Django application. we can use either nginx or apache web server. Nginx is just a web server. It doesn&amp;rsquo;t know how to run Python programs. For this, we need a server which understands how to run python programs. This server is called application server. To run a application server, we can use uwsgi, gunicorn and etc.</description>
    </item>
    
    <item>
      <title>CGI Programming with Python</title>
      <link>http://example.org/categories/title/</link>
      <pubDate>Thu, 18 Jan 2018 05:00:00 +0000</pubDate>
      
      <guid>http://example.org/categories/title/</guid>
      <description>If you have read the previous post, we stopped after introducing web servers. In this post, we write very simple web application using cgi programming.
CGI stands for Common Gateway Interface. Let&amp;rsquo;s say we received a web request, and we want to process that request with Python. CGI is basically a script that is run by the web server whenever a request is received. The script can be a Python script or a Shell script or Ruby script.</description>
    </item>
    
    <item>
      <title>Web programming with Python - Part 2 - CGI</title>
      <link>http://example.org/categories/title/</link>
      <pubDate>Thu, 18 Jan 2018 05:00:00 +0000</pubDate>
      
      <guid>http://example.org/categories/title/</guid>
      <description>If you have read the previous post, we stopped after introducing web servers. In this post, we write very simple web application using cgi programming.
CGI stands for Common Gateway Interface. Let&amp;rsquo;s say we received a web request, and we want to process that request with Python. CGI is basically a script that is run by the web server whenever a request is received. The script can be a Python script or a Shell script or Ruby script.</description>
    </item>
    
    <item>
      <title>Web programming with Python - Part 1 - Web Servers</title>
      <link>http://example.org/categories/title/</link>
      <pubDate>Wed, 15 Nov 2017 05:00:00 +0000</pubDate>
      
      <guid>http://example.org/categories/title/</guid>
      <description>Introduction Web programming or web development is a term that broadly means developing websites. Developing websites mainly consists of two parts.
 Front end development. Back end development.  Front end includes html, javascript and css. We can also say it is the creativity part. If you are more interested in creating beautiful websites, this is the path you should take. Backend involves in server side development including application business logic, database design and development, server deployment and maintenance and etc.</description>
    </item>
    
    <item>
      <title>Web Servers and clients</title>
      <link>http://example.org/categories/title/</link>
      <pubDate>Wed, 15 Nov 2017 05:00:00 +0000</pubDate>
      
      <guid>http://example.org/categories/title/</guid>
      <description>Introduction Web programming or web development is a term that broadly means developing websites. Developing websites mainly consists of two parts.
 Front end development. Back end development.  Front end includes html, javascript and css. We can also say it is the creativity part. If you are more interested in creating beautiful websites, this is the path you should take. Backend involves in server side development including application business logic, database design and development, server deployment and maintenance and etc.</description>
    </item>
    
    <item>
      <title>Reduce memory usage in Python using slots</title>
      <link>http://example.org/posts/2017-04-11-python-save-memory-usage-with-slots/</link>
      <pubDate>Tue, 11 Apr 2017 09:00:00 +0000</pubDate>
      
      <guid>http://example.org/posts/2017-04-11-python-save-memory-usage-with-slots/</guid>
      <description>slots is a kind of Python magic that reduces memory usage of a program. It&amp;rsquo;s useful only when we have a lot objects with fixed number of attributes. For example let&amp;rsquo;s assume we have a online shopping website. whenever a user adds a item to the cart, we create a object for that item. For example,
class CartItem(object): def __init__(self, item_id, added_time): self._item_id = item_id self._added_time = added_time Let&amp;rsquo;s create an object for CartItem.</description>
    </item>
    
    <item>
      <title>My Go Journey</title>
      <link>http://example.org/pages/tutorials/</link>
      <pubDate>Thu, 23 Mar 2017 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/pages/tutorials/</guid>
      <description>Python Beginner Tutorial This is a series of articles aimed to introduce Python to beginners.
 Introduction Installing Python Getting Started &amp;hellip; &amp;hellip;  Django Beginner Tutorial Django beginner level tutorial is written to introduce django to newcomers. This is a example based approach. Throughout this tutorial we will build different Django applications to introduce all necessary topics.
 Web servers and clients CGI Part II Django Introduction &amp;hellip; &amp;hellip;  </description>
    </item>
    
    <item>
      <title>Python List Comprehensions and generator expressions</title>
      <link>http://example.org/posts/2017-03-19-python-list-comprehensions-and-generator-expressions/</link>
      <pubDate>Sun, 19 Mar 2017 09:00:00 +0000</pubDate>
      
      <guid>http://example.org/posts/2017-03-19-python-list-comprehensions-and-generator-expressions/</guid>
      <description>Comprehensions are one of the prominent features of Python. Once you understand them, it helps avoiding lots of redundant and repetitive code. It helps creating lists, dictionaries and generators from other iterable objects with a single statement.
List Comprehensions Let&amp;rsquo;s take the below tuple as an example,
scores = ( (&amp;#39;Science&amp;#39;, 85), (&amp;#39;Phisics&amp;#39;, 65), (&amp;#39;Mathematics&amp;#39;, 89), (&amp;#39;Computer Science&amp;#39;, 34) ) To get all the subjects from this tuple,
&amp;gt;&amp;gt;&amp;gt; s = [subject for subject, score in scores] &amp;gt;&amp;gt;&amp;gt; s [&amp;#39;Science&amp;#39;, &amp;#39;Phisics&amp;#39;, &amp;#39;Mathematics&amp;#39;, &amp;#39;Computer Science&amp;#39;] The above statement with square bracket is called list comprehensions.</description>
    </item>
    
    <item>
      <title>Crawling web pages using Python and Scrapy - Tutorial</title>
      <link>http://example.org/posts/2015-06-02-crawling-web-pages-with-scrapy/</link>
      <pubDate>Tue, 02 Jun 2015 09:00:00 +0000</pubDate>
      
      <guid>http://example.org/posts/2015-06-02-crawling-web-pages-with-scrapy/</guid>
      <description>In this post, let us walk through how we can crawl web pages using Scrapy.
For this tutorial, we will download all the excerpts and ebooks available in https://www.goodreads.com/ebooks?sort=popular_books. This page is paginated. Let&amp;rsquo;s download books from first page only. At the end of this post, you will know how to follow and crawl other pages too.
First lets create a python virtual environment called goodreads.
mkvirtualenv goodreads workon goodreads To know more about how mkvirtualenv and workon commands work, visit and install virtualenvwrapper</description>
    </item>
    
    <item>
      <title>Static Site Generators</title>
      <link>http://example.org/posts/2015-01-30-static-site-generators/</link>
      <pubDate>Fri, 30 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/posts/2015-01-30-static-site-generators/</guid>
      <description>Static site generators are tools that generates static sites i.e. pure html websites without backend data processing, session management or user authentication system. It should be well enough for running a blog.
How static site generators work?
 Write your posts in markdown or rst. Run the static site generator to parse these posts into html. Upload the generated output to any server that serves html (or even host it in github pages).</description>
    </item>
    
    <item>
      <title>An Android app to search baby names</title>
      <link>http://example.org/posts/2014-04-29-an-android-app/</link>
      <pubDate>Tue, 29 Apr 2014 14:25:00 +0000</pubDate>
      
      <guid>http://example.org/posts/2014-04-29-an-android-app/</guid>
      <description>I have published a new Android app in Play Store called &amp;ldquo;Tamil Names&amp;rdquo;. It allows you to browse through a huge collection of Tamil names. It also offers a good search functionality to search names containing specific letters. I have categorized the names in to broader groups so that search and navigation could be easier to find a good name. It can be downloaded here from Play Store</description>
    </item>
    
    <item>
      <title>Python profiling</title>
      <link>http://example.org/posts/2013-08-28-python-profiling/</link>
      <pubDate>Wed, 28 Aug 2013 09:16:00 +0000</pubDate>
      
      <guid>http://example.org/posts/2013-08-28-python-profiling/</guid>
      <description>There are three main modules that provides time benchmarking in python.
 timeit - call it for profiling small python statements. (check out timeit module) cProfile - c extension for profiling. Profile - pure python implementation of cProfile. It exposes the same functions and classes of cProfile.  code:
:::python import cProfile from collections import deque p = cProfile.Profile() # create a new profile object d = deque() li = [] p.</description>
    </item>
    
    <item>
      <title>About</title>
      <link>http://example.org/about/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>http://example.org/about/</guid>
      <description>Welcome! Thank you for visiting. My name is Thavanathan. I live in Chennai with my wife and daughter.
I&amp;rsquo;m also in LinkedIn, Facebook and Google Plus. If you have anything to say, please drop me a mail at thavanathan.t[at]gmail[dot]com.</description>
    </item>
    
  </channel>
</rss>